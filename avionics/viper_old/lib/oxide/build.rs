use cbindgen::{
    Braces, Config, ConstantConfig, EnumConfig, FunctionConfig, Language, Layout,
    MacroExpansionConfig, ParseConfig, SortKey, StructConfig, Style, DocumentationStyle,
};
use std::env;

fn main() {
    generate_c_bindings();
}

fn generate_c_bindings() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();

    cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_config(Config {
            after_includes: None,
            autogen_warning: Some("/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */".into()),
            braces: Braces::SameLine,
            cpp_compat: false,
            documentation: true,
            language: Language::Cxx,
            include_guard: Some("OXIDE_H".into()),
            pragma_once: true,
            include_version: true,
            includes: vec![
                "interop/rust.h"
            ].into_iter().map(|x| x.into()).collect(),
            tab_width: 4,
            style: Style::Both,
            function: FunctionConfig {
                args: Layout::Auto,
                sort_by: SortKey::Name,
                ..Default::default()
            },
            structure: StructConfig {
                associated_constants_in_body: true,
                ..Default::default()
            },
            enumeration: EnumConfig {
                derive_helper_methods: true,
                enum_class: true,
                ..Default::default()
            },
            constant: ConstantConfig {
                allow_constexpr: true,
                allow_static_const: true,
                ..Default::default()
            },
            macro_expansion: MacroExpansionConfig {
                bitflags: true,
                ..Default::default()
            },
            parse: ParseConfig {
                parse_deps: false,
                ..Default::default()
            },
            documentation_style: DocumentationStyle::Auto,
            ..Default::default()
        })
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file("include/oxide.h");
}
